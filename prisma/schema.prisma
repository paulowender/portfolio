generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  avatarUrl    String?       @map("avatar_url")
  title        String?       // Professional title
  bio          String?       // Short professional bio
  location     String?       // Location
  phone        String?       // Contact phone
  website      String?       // Personal website
  linkedin     String?       // LinkedIn profile URL
  github       String?       // GitHub profile URL
  twitter      String?       // Twitter/X profile URL
  skills       String[]      // Array of skills
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  appointments Appointment[]
  projects     Project[]
  reminders    Reminder[]
  company      Company?

  @@map("users")
}

model Company {
  id          String    @id @default(uuid())
  name        String    // Company name
  logo        String?   // Company logo URL
  description String?   // Company description/about
  mission     String?   // Company mission statement
  vision      String?   // Company vision
  founded     String?   // Year founded
  services    String[]  // Array of services offered
  address     String?   // Company address
  phone       String?   // Company phone
  email       String?   // Company contact email
  website     String?   // Company website
  userId      String    @unique @map("user_id") // One-to-one relation with user
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("companies")
}

model Project {
  id           String   @id @default(uuid())
  title        String
  description  String
  imageUrl     String?  @map("image_url")
  liveUrl      String?  @map("live_url")
  githubUrl    String?  @map("github_url")
  technologies String[]
  featured     Boolean  @default(false)
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Reminder {
  id          String   @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime @map("due_date")
  completed   Boolean  @default(false)
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Appointment {
  id          String   @id @default(uuid())
  title       String
  description String?
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  location    String?
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appointments")
}
