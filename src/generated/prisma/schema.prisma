generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String
  avatarUrl       String?          @map("avatar_url")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  title           String?
  bio             String?
  location        String?
  phone           String?
  website         String?
  linkedin        String?
  github          String?
  twitter         String?
  skills          String[]
  aiConfig        AIConfig?
  appointments    Appointment[]
  company         Company?
  messagingConfig MessagingConfig?
  projects        Project[]
  reminders       Reminder[]

  @@map("users")
}

model Company {
  id          String   @id @default(uuid())
  name        String
  logo        String?
  description String?
  mission     String?
  vision      String?
  founded     String?
  services    String[]
  address     String?
  phone       String?
  email       String?
  website     String?
  userId      String   @unique @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("companies")
}

model Project {
  id           String   @id @default(uuid())
  title        String
  description  String
  imageUrl     String?  @map("image_url")
  liveUrl      String?  @map("live_url")
  githubUrl    String?  @map("github_url")
  technologies String[]
  featured     Boolean  @default(false)
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Reminder {
  id                String    @id @default(uuid())
  title             String
  description       String?
  dueDate           DateTime  @map("due_date")
  completed         Boolean   @default(false)
  userId            String    @map("user_id")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  category          String    @default("general")
  color             String?
  notifyBefore      Int       @default(60)
  notifyEmail       Boolean   @default(true)
  notifyWhatsapp    Boolean   @default(false)
  priority          String    @default("medium")
  recurrence        String?   @map("recurrence")
  recurrenceEndDate DateTime? @map("recurrence_end_date")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Appointment {
  id          String   @id @default(uuid())
  title       String
  description String?
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  location    String?
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model AIConfig {
  id                String   @id @default(uuid())
  userId            String   @unique @map("user_id")
  defaultProvider   String   @default("openai") @map("default_provider")
  defaultModel      String   @default("gpt-3.5-turbo") @map("default_model")
  openaiApiKey      String?  @map("openai_api_key")
  openaiEnabled     Boolean  @default(false) @map("openai_enabled")
  openaiModel       String?  @map("openai_model")
  anthropicApiKey   String?  @map("anthropic_api_key")
  anthropicEnabled  Boolean  @default(false) @map("anthropic_enabled")
  anthropicModel    String?  @map("anthropic_model")
  groqApiKey        String?  @map("groq_api_key")
  groqEnabled       Boolean  @default(false) @map("groq_enabled")
  groqModel         String?  @map("groq_model")
  openrouterApiKey  String?  @map("openrouter_api_key")
  openrouterEnabled Boolean  @default(false) @map("openrouter_enabled")
  openrouterModel   String?  @map("openrouter_model")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_configs")
}

model MessagingConfig {
  id                String   @id @default(uuid())
  userId            String   @unique @map("user_id")
  evolutionApiKey   String?  @map("evolution_api_key")
  evolutionBaseUrl  String?  @map("evolution_base_url")
  evolutionEnabled  Boolean  @default(false) @map("evolution_enabled")
  evolutionInstance String?  @map("evolution_instance")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  resendApiKey      String?  @map("resend_api_key")
  resendEnabled     Boolean  @default(false) @map("resend_enabled")
  resendFromEmail   String?  @map("resend_from_email")
  resendFromName    String?  @map("resend_from_name")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messaging_configs")
}
