// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  avatarUrl    String?       @map("avatar_url")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  projects     Project[]
  reminders    Reminder[]
  appointments Appointment[]

  @@map("users")
}

model Project {
  id           String   @id @default(uuid())
  title        String
  description  String
  imageUrl     String?  @map("image_url")
  liveUrl      String?  @map("live_url")
  githubUrl    String?  @map("github_url")
  technologies String[]
  featured     Boolean  @default(false)
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Reminder {
  id          String   @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime @map("due_date")
  completed   Boolean  @default(false)
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Appointment {
  id          String   @id @default(uuid())
  title       String
  description String?
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  location    String?
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appointments")
}
